import telebot
import math
import sqlite3
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import io
from itertools import zip_longest
from telebot import types
matplotlib.use('Agg') # –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±—ç–∫–µ–Ω–¥ Agg (Anti-Grain Geometry))

token = ''
bot = telebot.TeleBot(token)
id_send = '' # –í –∫–∞–∫–æ–π —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
administrator = 'kurillccc' # –ö–æ–≥–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
table_with_mailling_list = 'maillig_list'

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('BaseD_Math.db', check_same_thread=False)
cursor = conn.cursor() # —Å–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏

### –ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
### --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@bot.message_handler(commands=['send'])
def send(message):
    user_name = message.from_user.first_name
    chat_id = message.chat.id
    if (message.from_user.username == administrator):
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("Send to all users", callback_data='all_users')
        btn2 = types.InlineKeyboardButton("Show all users", callback_data='show_all_users')
        btn3 = types.InlineKeyboardButton("Send to one specific user", callback_data='specific_user')
        btn4 = types.InlineKeyboardButton("Close", callback_data='close')
        markup.add(btn1)
        markup.add(btn2)
        markup.add(btn3)
        markup.add(btn4)
        bot.send_message(chat_id, f'Choose an action:', reply_markup=markup)
        bot.callback_query_handler(func=settings_for_administration)
    else:
        bot.send_message(id_send, f'‚ö†Ô∏è@{message.from_user.username} –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π send ‚ö†Ô∏è\nUser id: {message.from_user.id} \nUser name: {user_name}\nü§ñ: Math_bot ')  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
        return
@bot.callback_query_handler(func=lambda call: call.data in ['all_users', 'show_all_users', 'specific_user', 'close'])
def settings_for_administration(call):
    if (call.data == 'all_users'):
        msg = bot.send_message(call.message.chat.id, f'Write the text:\n(write /stop to stop)')
        bot.register_next_step_handler(msg, all_users_send)
    elif (call.data == 'show_all_users'):
        chat_id = show_the_all_table_2('user_id')
        name = show_the_all_table_2('username')
        result = array_sum(chat_id, name)
        bot.send_message(call.message.chat.id, f'{result}')
    elif (call.data == 'specific_user'):
        msg = bot.send_message(call.message.chat.id, f'Send the user\'s chat id:\n(write /stop to stop)')
        bot.register_next_step_handler(msg, specific_user)
    elif (call.data == 'close'):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        return
# –î–ª—è –æ—Ç—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def all_users_send(message):
    if (message.text == '/stop'):
        return
    text = message.text
    cursor.execute(f"SELECT * FROM {table_with_mailling_list}")
    result = cursor.fetchall()
    column_index = 1  # –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ —Å —á–∞—Ç id
    column = [row[column_index] for row in result]
    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]  # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–Ω–∞–∏–ª—É—á—à–µ–µ) —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
        file_id = photo.file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        for id in column:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                caption = message.caption if message.caption is not None else ""
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.send_photo(id, file, caption=caption, parse_mode='HTML')
            except:
                pass
    else:
        for id in column:
            try:
                send_message_to_user(id, text)
            except:
                pass
# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def specific_user(message):
    if (message.text == "üìù –†–∞—Å—á–µ—Ç—ã"):
        return
    if (message.text == '/stop'):
        return
    user_id = int(message.text)
    text = bot.send_message(message.chat.id, f'Write the text\n(write /stop to stop)')
    bot.register_next_step_handler(text, send_text_specific_user, user_id)
def send_text_specific_user(message, user_id):
    if (message.text == '/stop'):
        return
    text = message.text
    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]  # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–Ω–∞–∏–ª—É—á—à–µ–µ) —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
        file_id = photo.file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            caption = message.caption if message.caption is not None else ""
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_photo(user_id, file, caption=caption, parse_mode='HTML')
        except:
            bot.send_message(message.chat.id, f'Not sent')
            return
        bot.send_message(message.chat.id, f'Successfully')
    else:
        try:
            send_message_to_user(user_id, text)
        except:
            bot.send_message(message.chat.id, f'Not sent')
            return
        bot.send_message(message.chat.id, f'Successfully')

# –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_message_to_user(user_id: int, text: str):
    bot.send_message(user_id, f'{text}', parse_mode="html".format(user_id))

# –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã (—á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –±–æ—Ç–∞, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é)
def pass_in_maillig_list(user_id: int, username: str, user_name: str, user_sername: str):
    cursor.execute('''CREATE TABLE {}
                            (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
                            user_id INTEGER UNIQUE,
                            username TEXT,
                            user_name TEXT,
                            user_sername TEXT)'''.format(table_with_mailling_list))
    cursor.execute(f'INSERT INTO {table_with_mailling_list} (user_id, username, user_name, user_sername) VALUES (?, ?, ?, ?)', (user_id, username, user_name, user_sername))
    conn.commit()
def show_the_all_table_2(name_of_the_column: str): # —Ç—É—Ç —Å–æ—Ä—Ç–∏—Ä–≤–æ–≤–∫–∞ –ø–æ id –∏–Ω–∞—á–µ –∫–æ–¥ –±—É–¥–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å–µ –≤—ã–¥–∞–≤–∞—Ç—å (–∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–∞)
    cursor.execute(f"SELECT {name_of_the_column} FROM {table_with_mailling_list} ORDER BY id")
    res = cursor.fetchall()  # –∑–∞–ø–∏—Å–∞–ª–∏ —Å—Ç–æ–ª–±–µ—Ü
    result_array = [r[0] for r in res]
    return result_array
def array_sum(arr1, arr2):
    result = "".join([f"üìå {a}   -   {b}\n" for a, b in zip(arr1, arr2)])
    return result
#############################################
@bot.message_handler(commands=['start'])
def start(message):
    username = '@' + message.from_user.username
    user_name = message.from_user.first_name
    chat_id = message.chat.id
    user_sername = message.from_user.last_name
    try:
        cursor.execute(f'INSERT INTO {table_with_mailling_list} (user_id, username, user_name, user_sername) VALUES (?, ?, ?, ?)', (chat_id, username, user_name, user_sername))
        conn.commit()
    except:
        try:
            pass_in_maillig_list(chat_id, username, user_name, user_sername)
        except:
            pass
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìù –†–∞—Å—á–µ—Ç—ã")
    markup.add(btn1)
    bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: ".format(message.from_user), reply_markup=markup)

# –≤—ã–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(content_types=['text'])
def function_first(message):
    if(message.text == "üìù –†–∞—Å—á–µ—Ç—ã"):
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        if message.from_user.username != administrator:
            bot.send_message(id_send, f'@{message.from_user.username} –Ω–∞–∂–∞–ª(-–∞) "üìù –†–∞—Å—á–µ—Ç—ã" \nUser id: {user_id}\nUser name: {user_name}\nBot: Math ') # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
        markup = types.InlineKeyboardMarkup() # –í —ç—Ç–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
        button1 = types.InlineKeyboardButton("–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å", callback_data='call.pogresh')
        button2 = types.InlineKeyboardButton("–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è", callback_data='call.approksimation')
        button3 = types.InlineKeyboardButton("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", callback_data='call.corelashion')
        button4 = types.InlineKeyboardButton("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data='call.creat_graph')
        markup.add(button1, button2) # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å (callback_data), —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∫—É
        markup.add(button3, button4)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ".format(message.from_user), reply_markup=markup)
        bot.callback_query_handler(func=function_second_1) # –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–ª–µ–¥ —Ñ—É–Ω–∫—Ü–∏—é
@bot.callback_query_handler(func=lambda call: call.data in ['call.pogresh', 'call.approksimation', 'call.end', 'call.continue.pog', 'call.approksimation.continue', 'call.corelashion', 'call.creat_graph'])
def function_second_1(call):
    if call.message:
        if call.data == 'call.pogresh':  # –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ', reply_markup=None)
            bot.register_next_step_handler(msg, start_of_pogreshnost) # –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        elif call.data == 'call.approksimation':    # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è
            markup = types.InlineKeyboardMarkup()  # –í —ç—Ç–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
            button1 = types.InlineKeyboardButton("–õ–∏–Ω–µ–π–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è", callback_data='call.linear')
            button2 = types.InlineKeyboardButton("–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è", callback_data='call.quadratic')
            button3 = types.InlineKeyboardButton("–ö—É–±–∏—á–µ—Å–∫–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è", callback_data='call.cubic')
            button4 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='call.into_function_first')
            markup.add(button1)  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å (callback_data), —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∫—É
            markup.add(button2)
            markup.add(button3)
            markup.add(button4)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏: ', reply_markup=markup)
            bot.callback_query_handler(func=inline_for_approksimation)
        elif call.data == 'call.corelashion':
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è x, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', reply_markup=None)
            bot.register_next_step_handler(msg, start_of_corelashion)
        elif call.data == 'call.creat_graph':
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è x, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', reply_markup=None)
            bot.register_next_step_handler(msg, creat_graph_X)
        elif call.data =='call.approksimation.continue':
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,reply_markup=None)
            markup = types.InlineKeyboardMarkup()  # –í —ç—Ç–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
            button1 = types.InlineKeyboardButton("–õ–∏–Ω–µ–π–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è", callback_data='call.linear')
            button2 = types.InlineKeyboardButton("–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è", callback_data='call.quadratic')
            button3 = types.InlineKeyboardButton("–ö—É–±–∏—á–µ—Å–∫–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è", callback_data='call.cubic')
            button4 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='call.into_function_first')
            markup.add(button1)  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å (callback_data), —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∫—É
            markup.add(button2)
            markup.add(button3)
            markup.add(button4)
            bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏: ', reply_markup=markup)
            bot.callback_query_handler(func=inline_for_approksimation)
        elif call.data == 'call.end':    # --–î–ª—è –≤—ã–±–æ—Ä–∫–∏ –≤ –∫–æ–Ω—Ü–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
            return
        elif call.data == 'call.continue.pog': # –°–æ–∑–¥–∞—é –æ—Ç–¥–µ–ª—å–Ω—ã–π call –¥–ª—è —ç—Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–¥–µ–Ω–µ–µ —Å–æ–±—â–µ–Ω–∏–µ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,reply_markup=None)
            msg = bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ', reply_markup=None)
            bot.register_next_step_handler(msg, start_of_pogreshnost)
# ----------------------------–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è----------------------------
def start_of_corelashion(message):
    try:
        pr = message.text.replace(',', '.')  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º "," –Ω–∞ "."
        x = [float(i) for i in pr.split(' ')]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)")
        return
    msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è y, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ')
    bot.register_next_step_handler(msg, continue_corelashion, x)
def continue_corelashion(message, x):
    try:
        pr = message.text.replace(',', '.')  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º "," –Ω–∞ "."
        y = [float(i) for i in pr.split(' ')]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)")
        return

    # —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    x_mean = sum(x) / float(len(x))
    y_mean = sum(y) / float(len(y))

    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–∏—Ç–µ–ª—å –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã
    numerator = sum([(xi - x_mean) * (yi - y_mean) for xi, yi in zip(x, y)])
    denominator_X = math.sqrt(sum([(xi - x_mean) ** 2 for xi in x]))
    denominator_Y = math.sqrt(sum([(yi - y_mean) ** 2 for yi in y]))
    denominator = denominator_X * denominator_Y
    # –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    correlation = numerator / denominator

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("‚èÆ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='call.into_f_1_without_edit')
    button2 = types.InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data='call.end')
    markup.add(button1, button2)
    bot.send_message(message.chat.id, f"üîª –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ X: {round(x_mean, 6)}\n\nüîª –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Y: {round(y_mean, 6)}\n\nüîª –ß–∏—Å–ª–∏—Ç–µ–ª—å: {round(numerator, 6)}\n\nüîª –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Å X: {round(denominator_X, 6)}\n\nüîª –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Å Y: {round(denominator_Y, 6)}\n\nüî• –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (R): <b>{round(correlation, 6)}</b>", parse_mode="html", reply_markup=markup)
    bot.callback_query_handler(func=function_second_1)
# ----------------------------–ö–æ–Ω–µ—Ü----------------------------------

# ----------------------------–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫----------------------------
def creat_graph_X(message):
    try:
        pr = message.text.replace(',', '.')  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º "," –Ω–∞ "."
        x = [float(i) for i in pr.split(' ')]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)")
        return
    msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è y, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ')
    bot.register_next_step_handler(msg, creat_graph_Y, x)
def creat_graph_Y(message, x):
    try:
        pr = message.text.replace(',', '.')  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º "," –Ω–∞ "."
        y = [float(i) for i in pr.split(' ')]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)")
        return

    # 'o-' –∑–∞–¥–∞–µ—Ç —Å—Ç–∏–ª—å –ª–∏–Ω–∏–∏ –∏ –º–∞—Ä–∫–µ—Ä–æ–≤
    plt.clf()  # –û—á–∏—â–∞–µ–º —Ä–∏—Å—É–Ω–æ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
    try:
        plt.plot(x, y, 'o')
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—á–∏—Å–ª–æ x –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —á–∏—Å–ª–æ–º y)")
        return
    plt.title('–ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–æ—á–∫–∞–º')
    plt.xlabel('–ó–Ω–∞—á–µ–Ω–∏—è x')
    plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏—è y')
    # –≤–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞ –æ—Å—è—Ö
    plt.minorticks_on()
    # –≤–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Ç–∫—É
    plt.grid(which='major', zorder=1)
    # –≤–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É
    plt.grid(which='minor', linestyle=':', zorder=1)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("‚èÆ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='call.into_f_1_without_edit')
    button2 = types.InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data='call.end')
    markup.add(button1, button2)

    x_str = ' '.join(map(str, x))
    y_str = ' '.join(map(str, y))

    bot.send_photo(message.chat.id, photo=buf, caption= \
                     f'üîπ –ó–Ω–∞—á–µ–Ω–∏—è X:\n {x_str}\n\n' \
                     f'üîπ –ó–Ω–∞—á–µ–Ω–∏—è Y:\n {y_str}', parse_mode="html".format(message.from_user), reply_markup=markup)
    buf.close()
    del buf
    bot.callback_query_handler(func=function_second_1)

# ----------------------------–ö–æ–Ω–µ—Ü----------------------------------

# ----------------------------–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è----------------------------
@bot.callback_query_handler(func=lambda call: call.data in ['call.linear', 'call.quadratic', 'call.cubic', 'call.into_function_first', 'call.into_f_1_without_edit'])
def inline_for_approksimation(call):
    if call.message:
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        if call.data == 'call.linear':    # -–î–ª—è –ª–∏–Ω–µ–π–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
            bot.delete_message(chat_id, message_id)
            msg = bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è x, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ')
            bot.register_next_step_handler(msg, linear_approksimation)
        elif call.data == 'call.quadratic':     # -–î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
            bot.delete_message(chat_id, message_id)
            msg = bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è x, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ')
            bot.register_next_step_handler(msg, quadratic_approksimation)
        elif call.data == 'call.cubic':     # -–î–ª—è –∫—É–±–∏—Ä—É–µ–º–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
            bot.delete_message(chat_id, message_id)
            msg = bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è x, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ')
            bot.register_next_step_handler(msg, cubic_approksimation)
        elif call.data == 'call.into_function_first':
            #bot.delete_message(chat_id, message_id)
            key = types.InlineKeyboardMarkup()  # –í —ç—Ç–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
            button1 = types.InlineKeyboardButton("–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å", callback_data='call.pogresh')
            button2 = types.InlineKeyboardButton("–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è", callback_data='call.approksimation')
            button3 = types.InlineKeyboardButton("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", callback_data='call.corelashion')
            button4 = types.InlineKeyboardButton("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data='call.creat_graph')
            key.add(button1,button2)  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å (callback_data), —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∫—É
            key.add(button3, button4)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=key)
            bot.callback_query_handler(func=function_second_1)  # –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–ª–µ–¥ —Ñ—É–Ω–∫—Ü–∏—é
        elif call.data == 'call.into_f_1_without_edit':
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
            key = types.InlineKeyboardMarkup()  # –í —ç—Ç–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
            button1 = types.InlineKeyboardButton("–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å", callback_data='call.pogresh')
            button2 = types.InlineKeyboardButton("–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è", callback_data='call.approksimation')
            button3 = types.InlineKeyboardButton("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", callback_data='call.corelashion')
            button4 = types.InlineKeyboardButton("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data='call.creat_graph')
            key.add(button1,button2)  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å (callback_data), —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∫—É
            key.add(button3, button4)
            bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=key)
            bot.callback_query_handler(func=function_second_1)  # –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–ª–µ–¥ —Ñ—É–Ω–∫—Ü–∏—é
# ----–õ–∏–Ω–µ–π–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è----
def linear_approksimation(message):
    mas_x_1 = []
    try:
        pr = message.text.replace(',', '.')  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º "," –Ω–∞ "."
        mas_x_1 = [float(i) for i in pr.split(' ')]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)")
        return
    msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è y, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ')
    bot.register_next_step_handler(msg, start_of_appriksimation_y_1, mas_x_1)
# –°—á–∏—Ç–∞–µ–º –¥–∞–ª—å—à–µ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
def start_of_appriksimation_y_1(message, mas_x_1):
    mas_y_1 = []
    try:
        pr = message.text.replace(',', '.')  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º "," –Ω–∞ "."
        mas_y_1 = [float(i) for i in pr.split(' ')]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)")
        return
    x = np.array(mas_x_1)
    y = np.array(mas_y_1)
    plus_app_b = '+'
    try:
        a, b = np.polyfit(x, y, 1)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—á–∏—Å–ª–æ x –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —á–∏—Å–ª–æ–º y)")
        return
    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    plt.clf() # –û—á–∏—â–∞–µ–º —Ä–∏—Å—É–Ω–æ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
    plt.scatter(x, y, color='blue', zorder=2)
    plt.plot(x, a * x + b, color='red')
    plt.title('–ì—Ä–∞—Ñ–∏–∫ –ª–∏–Ω–µ–π–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏')
    plt.xlabel('–ó–Ω–∞—á–µ–Ω–∏—è x')
    plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏—è y')
    # –≤–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞ –æ—Å—è—Ö
    plt.minorticks_on()
    # –≤–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Ç–∫—É
    plt.grid(which='major', zorder=1)
    # –≤–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É
    plt.grid(which='minor', linestyle=':', zorder=1)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    if b < 0: plus_app_b = '-'
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("‚èÆ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='call.approksimation.continue')
    button2 = types.InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data='call.end')
    markup.add(button1, button2)
    bot.send_photo(message.chat.id, photo=buf, caption=f'üîπ a = {round(a, 6)} \n\n' \
                                                       f'üîπ b = {round(b, 6)}\n\n' \
                                                       f'üî∏ <b>y = {round(a, 6)}x {plus_app_b} {round(abs(b), 6)}</b>',parse_mode="html".format(message.from_user), reply_markup=markup)
    buf.close()
    del buf
    bot.callback_query_handler(func=function_second_1)
# -----–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è-----
def quadratic_approksimation(message):
    mas_x_2 = []
    try:
        pr = message.text.replace(',', '.')  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º "," –Ω–∞ "."
        mas_x_2 = [float(i) for i in pr.split(' ')]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)")
        return
    msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è y, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ')
    bot.register_next_step_handler(msg, start_of_appriksimation_y_2, mas_x_2)
# –°—á–∏—Ç–∞–µ–º –¥–∞–ª—å—à–µ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
def start_of_appriksimation_y_2(message, mas_x_2):
    mas_y_2 = []
    try:
        pr = message.text.replace(',', '.')  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º "," –Ω–∞ "."
        mas_y_2 = [float(i) for i in pr.split(' ')]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)")
        return
    x = np.array(mas_x_2)
    y = np.array(mas_y_2)
    plus_app_b = '+'
    plus_app_c = '+'
    try:
        a, b, c = np.polyfit(x, y, 2)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—á–∏—Å–ª–æ x –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —á–∏—Å–ª–æ–º y)")
        return
    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    plt.clf()  # –û—á–∏—â–∞–µ–º —Ä–∏—Å—É–Ω–æ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
    plt.scatter(x, y, color='blue', zorder=2)
    plt.plot(x, a * x ** 2 + b * x + c, color='red')
    plt.title('–ì—Ä–∞—Ñ–∏–∫ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏')
    plt.xlabel('–ó–Ω–∞—á–µ–Ω–∏—è x')
    plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏—è y')
    # –≤–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞ –æ—Å—è—Ö
    plt.minorticks_on()
    # –≤–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Ç–∫—É
    plt.grid(which='major', zorder=1)
    # –≤–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É
    plt.grid(which='minor', linestyle=':', zorder=1)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    if b < 0: plus_app_b = '-' # –ú–µ–Ω—è–µ–º, —á—Ç–æ–±—ã –≤ –≤—ã–≤–æ–¥–µ –±—ã–ª –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –º–∏–Ω—É—Å
    if c < 0: plus_app_c = '-'
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("‚èÆ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='call.approksimation.continue')
    button2 = types.InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data='call.end')
    markup.add(button1, button2) # –í—ã–≤–æ–¥ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π
    bot.send_photo(message.chat.id, photo=buf, caption= \
                     f'üîπ a = {round(a, 6)} \n\n' \
                     f'üîπ b = {round(b, 6)}\n\n' \
                     f'üîπ c = {round(c, 6)}\n\n' \
                     f'üî∏ <b>y = {round(a, 6)}x¬≤ {plus_app_b} {round(abs(b), 6)}x {plus_app_c} {round(abs(c), 6)}</b>',
                     parse_mode="html".format(message.from_user), reply_markup=markup)
    buf.close()
    del buf
    bot.callback_query_handler(func=function_second_1)
# ----–ö—É–±–∏—á–µ—Å–∫–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è----
def cubic_approksimation(message):
    mas_x_3 = []
    try:
        pr = message.text.replace(',', '.')  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º "," –Ω–∞ "."
        mas_x_3 = [float(i) for i in pr.split(' ')]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)")
        return
    msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è y, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ')
    bot.register_next_step_handler(msg, start_of_appriksimation_y_3, mas_x_3)
# –°—á–∏—Ç–∞–µ–º –¥–∞–ª—å—à–µ –¥–ª—è –∫—É–±–∏—á–µ—Å–∫–æ–π
def start_of_appriksimation_y_3(message, mas_x_3):
    mas_y_3 = []
    try:
        pr = message.text.replace(',', '.')  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º "," –Ω–∞ "."
        mas_y_3 = [float(i) for i in pr.split(' ')]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)")
        return
    x = np.array(mas_x_3)
    y = np.array(mas_y_3)
    plus_app_b = '+'
    plus_app_c = '+'
    plus_app_d = '+'
    try:
        a, b, c, d = np.polyfit(x, y, 3)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—á–∏—Å–ª–æ x –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —á–∏—Å–ª–æ–º y)")
        return
    if b < 0: plus_app_b = '-'
    if c < 0: plus_app_c = '-'
    if d < 0: plus_app_d = '-'
    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    plt.clf()  # –û—á–∏—â–∞–µ–º —Ä–∏—Å—É–Ω–æ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
    plt.scatter(x, y, color='blue', zorder=2)
    plt.plot(x, a * x ** 3 + b * x ** 2 + c * x + d, color='red')
    plt.title('–ì—Ä–∞—Ñ–∏–∫ –∫—É–±–∏—á–µ—Å–∫–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏')
    plt.xlabel('–ó–Ω–∞—á–µ–Ω–∏—è x')
    plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏—è y')
    # –≤–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞ –æ—Å—è—Ö
    plt.minorticks_on()
    # –≤–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Ç–∫—É
    plt.grid(which='major', zorder=1)
    # –≤–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É
    plt.grid(which='minor', linestyle=':', zorder=1)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("‚èÆ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='call.approksimation.continue')
    button2 = types.InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data='call.end')
    markup.add(button1, button2) # –í—ã–≤–æ–¥ –∫—É–±–∏—á–µ—Å–∫–æ–π
    bot.send_photo(message.chat.id, photo=buf, caption= \
                     f'üîπ a = {round(a, 6)} \n\n' \
                     f'üîπ b = {round(b, 6)}\n\n' \
                     f'üîπ c = {round(c, 6)}\n\n' \
                     f'üîπ d = {round(d, 6)}\n\n' \
                     f'üî∏ <b>y = {round(a, 6)}x¬≥ {plus_app_b} {round(abs(b), 6)}x¬≤ {plus_app_c} {round(abs(c), 6)}x {plus_app_d} {round(abs(d), 6)}</b>',
                     parse_mode="html".format(message.from_user), reply_markup=markup)
    buf.close()
    del buf
    bot.callback_query_handler(func=function_second_1)

# -------------------–ö–æ–Ω–µ—Ü_—Ä–∞—Å—á–µ—Ç–∞_–∞–ø–ø—Ä–æ–∫—Å–∏—Ü–º–∞—Ü–∏–∏--------------------

# ----------------------------–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å----------------------------

def start_of_pogreshnost(message):
    mas = []
    try:
        pr = message.text.replace(',', '.')     # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º "," –Ω–∞ "."
        mas = [float(i) for i in pr.split(' ')] # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)")
        return
    count = len(mas)
    sred = sum(mas)/count
    So = math.sqrt(sum([(x - sred) ** 2 for x in mas]) / (count*(count - 1)))
    # –°—Ç—å—é–¥–µ–Ω—Ç
    if count > 1 and count < 15:
        student = [None, None, 12.706204736432095, 4.302652729911275,  3.182446305284263,  2.7764451051977987, 2.5705818366147395, 2.4469118487916806, 2.3646242510102993, 2.3060041350333704, 2.2621571627409915, 2.2281388519649385, 2.200985160082949,  2.1788128296634177, 2.1603686564610127]
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–∏–±–æ—Ä–∞: ')
        bot.register_next_step_handler(msg, pre_end, So, student[count], sred)
    # –ï—Å–ª–∏ —Å—Ç—å—é–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ
    else:
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ç—å—é–¥–µ–Ω—Ç–∞: ')
        bot.register_next_step_handler(msg, student_not_auto, So, sred)
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—å—é–¥–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def student_not_auto(message, So, sred):
    try:
        student = float(message.text.replace(',', '.'))
    except:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö \n(–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ç—å—é–¥–µ–Ω—Ç–∞ –≤–≤–æ–¥–∏—Ç—Å—è –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º)')
        return
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–∏–±–æ—Ä–∞: ')
    bot.register_next_step_handler(msg, pre_end, So, student, sred)
# –í—ã–≤–æ–¥ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π
def pre_end(message, So, student, sred):
    infinity_student = 1.960

    try:
          device_pogresh = float(message.text.replace(',', '.'))
    except:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö \n(–ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∏—Ç—å –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º)')
        return
    a_device = infinity_student * (device_pogresh / 3)
    a_random = student * So
    a_pogresh = pow((pow(a_random, 2) + pow(a_device, 2)), 0.5)
    otnosit_pogreshn = a_pogresh / sred
# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ + –≤—ã–±–æ—Ä–∫–∞ —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='call.continue.pog')
    button2 = types.InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data='call.end')
    button3 = types.InlineKeyboardButton("‚èÆ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='call.into_f_1_without_edit')
    markup.add(button1, button2)
    markup.add(button3)
    # –í—ã–≤–æ–¥
    bot.send_message(message.chat.id,  \
    f'1Ô∏è‚É£ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {round(sred,6)} \n\n' \
    f'2Ô∏è‚É£ –°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (S‚ÇÄ): {round(So, 6)}\n\n' \
    f'3Ô∏è‚É£ –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (Œîa —Å–ª.): {round(a_random, 6)}\n\n' \
    f'4Ô∏è‚É£ –ü—Ä–∏–±–æ—Ä–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (Œîa –ø—Ä.): {round(a_device, 6)}\n\n' \
    f'5Ô∏è‚É£ –û–±—â–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (Œîa): {round(a_pogresh, 6)}\n\n' \
    f'üî• –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \n<b>({round(sred, 6)} ¬± {round(a_pogresh, 8)})</b>\n\n' \
    f'‚ñ™Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ç—å—é–¥–µ–Ω—Ç–∞ (t): {round(student, 6)}\n' \
    f'‚ñ™Ô∏è –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (Œµ): {round(otnosit_pogreshn, 6)}', parse_mode="html".format(message.from_user), reply_markup=markup)

    bot.callback_query_handler(func=function_second_1) # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ `func` —è–≤–ª—è–µ—Ç—Å—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä

# ------------------------–ö–æ–Ω–µ—Ü_—Ä–∞—Å—á–µ—Ç–∞_–ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π------------------------

bot.infinity_polling()
